(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{448:function(e,a,o){"use strict";o.r(a);var s=o(56),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"introducao"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#introducao"}},[e._v("#")]),e._v(" Introdução")]),e._v(" "),o("p",[e._v("O curso tem como objetivo gerar recomendações de filmes do site Movie Lens e implementar uma variação do algorítimo k-NN (k-nearest neighbors). nesse relatório iremos abordar sobre o algorítimo elaborado, além de explicar de forma breve alguns dos conceitos utilizados")]),e._v(" "),o("h2",{attrs:{id:"sistemas-de-recomendacao-e-heuristicas-iniciais"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#sistemas-de-recomendacao-e-heuristicas-iniciais"}},[e._v("#")]),e._v(" Sistemas de recomendação e heurísticas iniciais")]),e._v(" "),o("p",[e._v("Sistemas recomendadores (ou de recomendação) são softwares e\nSistemas de recomendação ( do ingles "),o("em",[e._v("Recommender Systems - RSs")]),e._v(") são ferramentas e técnicas de software que fornecem sugestões de itens para serem úteis ao usuário. As sugestões estão relacionadas a vários processos de tomada de decisão, como quais itens comprar, que música escutar ou que notícias on-line ler [1].")]),e._v(" "),o("p",[e._v("As recomendações podem ser feitas a partir de diversas abordagens, e dependem de fatores como "),o("strong",[e._v("conhecimento prévio ou não dos gostos do usuário, datasets")]),e._v(" dentre outros.")]),e._v(" "),o("p",[e._v("No nosso caso, o dataset consistia em uma série de notas de filmes por diversos usuários, todos com um ID numérico. Dessa forma, nossa primeira abordagem foi a "),o("strong",[e._v("heurística de total de votos")]),e._v(": faz sentido pensar que se um filme possui um alto número de avaliações é porque ele pode ser uma recomendação interessante.")]),e._v(" "),o("p",[e._v("De cara vimos alguns problemas nessa abordagem. Um alto número de avaliações não necessáriamente quer dizer que o filme foi bem recomendado. Ao contrário, posso ter um filme com grande número de avaliações, mas a maioria delas negativa. Assim, chegamos a segunda abordagem: "),o("strong",[e._v("ordenar pela média")]),e._v(" dos filmes.")]),e._v(" "),o("p",[e._v("Com essa segunda heurística eu passo a recomendar filmes que foram mais bem avaliados, tornando as recomendações mais válidas. Contudo com um novo problema: recomendar filmes com base única e exclusivamente na avaliação pode trazer filmes com avaliações enviesadas ou de nicho, com poucas ou somente uma avaliação, não sendo uma boa opção de recomendação.")]),e._v(" "),o("p",[e._v("Uma forma de resolver esse problema é determinar um número mínimo de avaliações para que um filme seja recomendado, e nesse caso nós descartamos filmes com menos de 50 avaliações, o que melhora o nosso recomendador.")]),e._v(" "),o("p",[e._v("Ainda assim, todas os métodos acima não assumem nenhum conhecimento prévio sobre o usuário, e o nosso dataset nós dá esses dados. Podemos então fazer um outro tipo de abordagem: escolher um usuário qualquer e procurar outros usuários com gostos similares ao inicialmente escolhido.")]),e._v(" "),o("h3",{attrs:{id:"distancia-euclidiana-entre-os-usuarios-collaborative-filtering"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#distancia-euclidiana-entre-os-usuarios-collaborative-filtering"}},[e._v("#")]),e._v(" Distância euclidiana entre os usuários & Collaborative filtering")]),e._v(" "),o("p",[e._v("Até o momento fizemos apenas uma filtragem baseada apenas nas notas e número de avaliações dos filmes, ou seja, uma filtragem baseada em conteúdo ("),o("em",[e._v("content based filtering")]),e._v("). Mas, e se considerarmos as avaliações dos usuários? Como o dataset nos fornece esses dados, é possível fazer uma filtragem colaborativa ("),o("em",[e._v("colaborative filtering")]),e._v("), ou seja, recomendar filmes a partir das avaliações dos próprios usuários.")]),e._v(" "),o("p",[e._v("Para isso temos de calcular as distâncias entre as avaliações de um usuário qualquer e os outros usuários. Esse cálculo é a "),o("strong",[e._v("distância euclidiana")]),e._v(" entre as notas dos filmes, e quanto menor for o resultado, mais próximos são os gostos entre os usuários. A partir disso podemos montar uma lista com os n usuários mais próximos, pegando os filmes mais bem avaliados por eles.")]),e._v(" "),o("h3",{attrs:{id:"collaborative-filtering-content-based-filtering-o-melhor-de-dois-mundos"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#collaborative-filtering-content-based-filtering-o-melhor-de-dois-mundos"}},[e._v("#")]),e._v(" Collaborative filtering & Content based filtering: o melhor de dois mundos")]),e._v(" "),o("p",[e._v("O método anterior, apesar de ser muito eficiente, também possui algumas falhas: filmes visto somente por 1 ou poucos usuários da lista ou de nicho voltam a ser recomendados. Isso leva a necessidade de alguns ajustes: devemos considerar não somente a filtragem colaborativa, mas também o conteúdo.")]),e._v(" "),o("p",[e._v("Em suma, devemos considerar um número mínimo de usuários que viram o mesmo filme para que o título seja recomendado (consideramos 50% nesse caso) e devemos também descartar filmes abaixo do limiar de avaliações determinado anteriormente (no mínimo 50 avaliações) e filmes que já foram vistos pelo usuaŕio inicial.")]),e._v(" "),o("p",[e._v("A partir disso nosso recomendador irá calcular possíveis filmes, recomendando novos filmes com base nos filmes que o usuaŕio inicial assistiu e avaliou. Esse algorítmo passa a ser uma implementação muito próxima do "),o("strong",[o("em",[e._v("k nearest neighbors (knn)")]),e._v(" ou 'k mais próximos vizinhos'")]),e._v(".")]),e._v(" "),o("h2",{attrs:{id:"referencias"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#referencias"}},[e._v("#")]),e._v(" Referencias")]),e._v(" "),o("p",[e._v("[1] Francesco Ricci and Lior Rokach and Bracha Shapira, Introduction to Recommender Systems Handbook, Recommender Systems Handbook, Springer, 2011")]),e._v(" "),o("p",[e._v("F. Maxwell Harper and Joseph A. Konstan. 2015. The MovieLens Datasets: History and Context. ACM Transactions on Interactive Intelligent Systems (TiiS) 5, 4: 19:1–19:19. "),o("a",{attrs:{href:"https://doi.org/10.1145/2827872",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://doi.org/10.1145/2827872"),o("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);